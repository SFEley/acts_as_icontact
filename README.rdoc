= ActsAsIcontact

ActsAsIcontact connects Ruby applications with the {iContact e-mail marketing service}[http://icontact.com] using the iContact API v2.0.  Building on the RestClient[http://rest-client.heroku.com] gem, it offers two significant feature sets:

* Simple, consistent access to all resources in the iContact API; and
* Automatic synchronizing between ActiveRecord models and iContact contact lists for Rails applications.

== Setting Up

Using ActsAsIcontact is easy, but going through iContact's authorization process requires jumping a couple of hoops.  Here's how to get going quickly:

1.Install the gem.
 	  $ sudo gem install acts_as_icontact
2._(Optional, but recommended)_ Go to http://beta.icontact.com and sign up for
an iContact Beta account. ActsAsIcontact will use your Beta credentials and
API URL by default if the RAILS_ENV or RACK_ENV variables are set to anything
but 'production', or if you tell it to in configuration.
3.Enable the ActsAsIcontact gem for use with your iContact account. The URL and credentials you'll use are different between the beta and production environments:
	a.*BETA* Go to: http://app.beta.icontact.com/icp/core/externallogin and
		enter +Ml5SnuFhnoOsuZeTOuZQnLUHTbzeUyhx+ for the Application Id.  Choose
		a password for ActsAsIcontact that's different from your account password.
	b.*PRODUCTION* Go to: http://app.icontact.com/icp/core/externallogin
		and enter +Ml5SnuFhnoOsuZeTOuZQnLUHTbzeUyhx+ for the Application Id.
		Choose a password for ActsAsIcontact that's different from your account
		password.
4.Set your _(beta, if applicable)_ account username and the password you just chose for API access. You can either set the environment variables
+ICONTACT_USERNAME+ and +ICONTACT_PASSWORD+, or you can explicitly do it with calls to the Config module:
	  require 'rubygems'
		require 'acts_as_icontact'
		
		ActsAsIcontact::Config.beta = true
		ActsAsIcontact::Config.username = my_beta_username
		ActsAsIcontact::Config.password = my_api_password
  If you're using Rails, the recommended approach is to require the gem with
+config.gem 'acts_as_icontact'+ in your *config/environment.rb* file, and then
set up an initializer (i.e. *config/initializers/acts_as_icontact.rb*) with the above code.  See more about Rails below.
5.Rinse and repeat with production credentials when you're ready to move out of the beta environment.	

== API Access

Whether or not you're using Rails, retrieving and modifying iContact resources is simple.  The gem autodiscovers your account and client folder IDs (you only have one of each unless you're an 'agency' account), so you can jump straight to the good parts:

  contacts = ActsAsIcontact::Contact.find(:all)  # => <#ActsAsIcontact::ResourceCollection>
	c = contacts.first  	# => <#ActsAsIcontact.Contact>
	c.firstName  					# => "Bob"
	c.lastName   					# => "Smith"
	c.email      					# => "bob@example.org"
	c.lastName = "Smith-Jones"   # Bob gets married and changes his name
	c.save 								# => true
	history = c.actions		# => <#ActsAsIcontact::ResourceCollection>
	a = history.first			# => <#ActsAsIcontact::Action>
	a.actionType					# => "EditFields"
	
	
=== Nesting
The interface is deliberately as "ActiveRecord-like" as possible, with methods linking resources that are either nested in iContact's URLs or logically related.  Messages have a Message#bounces method.  Lists have List#subscribers to list the Contacts subscribed to them, and Contacts have Contact#lists.  Read the documentation for each class to find out what you can do:

* ActsAsIcontact::Account
** ActsAsIcontact::ClientFolder
* ActsAsIcontact::Contact
** ActsAsIcontact::Action _(documented as "Contact History")_
* ActsAsIcontact::Message
** ActsAsIcontact::Bounce
** ActsAsIcontact::Click
** ActsAsIcontact::Open
** ActsAsIcontact::Unsubscribe
** ActsAsIcontact::Statistics
* ActsAsIcontact::List
** ActsAsIcontact::Segment
*** ActsAsIcontact::Criterion  _(documented as "Segment Criteria")_
* ActsAsIcontact::Subscription
* ActsAsIcontact::Campaign
* ActsAsIcontact::CustomField
* ActsAsIcontact::Send
* ActsAsIcontact::Upload
* ActsAsIcontact::User
** ActsAsIcontact::Permission
* ActsAsIcontact::Time

=== Searching
Searches are handled in a sane way using the same query options that iContact accepts.  The following are all valid:

Messages.all::   Same as Messages.find(:all)
Messages.first:: Same as Messages.find(:first)
Messages.find(:all, :limit => 20):: First 20 messages
Messages.find(:all, :limit => 20, :offset => 40):: Messages 41-60
Messages.first(:subject => "Fnord"):: First message with the given subject
Messages.all(:orderby => createDate, :desc => true):: Messages ordered by most recent first
Messages.all(:messageType => "welcome", :campaignId => 11):: Welcome messages from the given campaign

At this time, special searches are not yet supported.  Fields requiring dates must also be given a string corresponding to the ISO8601 timestamp (i.e. +2006-09-16T14:30:00-06:00+).  Proper date/time conversion will happen soon.

=== Updating

Again, think ActiveRecord.  When you initialize an object, you can optionally pass it a hash of values:

	c = Contact.new(:firstName => "Bob", :lastName => "Smith-Jones", :email => "bob@example.org")
	c.address = "123 Test Street"

Each resource class has a #save method which returns true or false.  If false, the #error method contains the reply back from iContact about what went wrong.  (Which may or may not be informative, but we can't tell you more than they do.)  There's also a #save! method which throws an exception instead.

Nested resources can be created using the +build_+ method (which returns an object but doesn't save it right away) or +create_+ method (which does save it upon creation).  The full panoply of ActiveRecord association methods are not implemented yet.  (Hey, we said it was AR-_like._)

The #delete method on each class works as you'd expect, assuming iContact allows deletes on that resource.  Resource collections containing the resource are not updated, however, so you may need to requery.

Multiple-record updates are not implemented at this time.







== Copyright

Copyright (c) 2009 Stephen Eley. See LICENSE for details.
